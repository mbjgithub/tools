var cookie = require("../util/cookie");
var report = require("./report");

var storage = (function() {
	var isWebStorage = false;
	try {
		if (window.localStorage) {
			isWebStorage = true;
		}
	} catch (e) {}
	var mydomain = location.hostname || location.host;

	return isWebStorage ? {
		get: function (key) {
			return localStorage.getItem(key);
		},
		set: function (key, val) {
			return localStorage.setItem(key, val);
		},
		clear: function (key) {
			return localStorage.removeItem(key);
		}
	} : {
		get: function (key) {
			return cookie.get(key);
		},

		set: function (key, val) {
			return cookie.set(key, val, mydomain);
		},

		clear: function (key) {
			return cookie.set(key, '', mydomain);
		}
	};
})();

var reg = /^(?:ht|f)tp(?:s)?\:\/\/(?:[\w\-\.]+)\.\w+/i;
/*检测是否是url地址*/

var k = 'txv_lazyreport_list';
var d = '|';


//var size = function () {
//	var itemList = storage.get(k);
//	return !!itemList ? itemList.split(d).length : 0;
//};

//var val = function () {
//	var itemList = storage.get(k);
//	return !!itemList ? itemList : '';
//};

var clear = function () {
	return storage.clear(k);
};

/*取出第一个*/
var shift = function () {
	var itemList = storage.get(k);
	if (!itemList) return '';
	var arr = itemList.split(d);
	var o = arr.shift();
	storage.set(k, arr.join(d));
	return !!o ? decodeURIComponent(o) : '';
};

/*追加一个*/
var push = function (item) {
	if (!item) return;
	var itemList = storage.get(k);
	var arr = [];
	if (!!itemList) {
		arr = itemList.split(d);
	}
	arr.push(encodeURIComponent(item));
	storage.set(k, arr.join(d));
};

/*取出最上面一个*/
//var pop = function () {
//	var itemList = storage.get(k);
//	if (!itemList) return '';
//	var arr = itemList.split(d);
//	var o = arr.pop();
//	storage.set(k, arr.join(d));
//	return !!o ? decodeURIComponent(o) : '';
//};
/**
 * 存储的格式 item1|item2|item3...,item必须是经过encode之后的
 * 获取第n个
 * 取不到返回空字符串
 */
//var get = function (index) {
//	index = index || 0;
//	index = index < 0 ? 0 : index;
//	var s = size();
//	if (s < (index + 1)) return '';
//	return decodeURIComponent(storage.get(k).split(d)[index]);
//};

var reportItem = function (item) {
	if (reg.test(item)) {
		try {
			!!report && report(item);
		} catch (e) {

		}
	} else {
		setTimeout(function () {
			try {
				eval(item);
			} catch (e) {}
		}, 0);
	}
};

var _report = function () {
	var item = shift();
	while (!!item) {
		reportItem(item);
		item = shift();
	}
};

//统计延时上报组件
module.exports = {
	//get: get,
	push: push,
	//pop: pop,
	//shift: shift,
	//size: size,
	clear: clear,
	//val: val,
	report: _report
};