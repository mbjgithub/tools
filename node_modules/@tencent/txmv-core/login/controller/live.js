/**
 * 视频客户端
 */
'use strict';
var ua = require("@tencent/txv.ua")();
var jsbridge = require("../../jsbridge");
var time33 = require("../../helper/time33");
var cookie = require("../../util/cookie");

function commonBridgeCallback(cb) {
	return function (json) {
		var obj;
		try {
			obj = JSON.parse(json);
		} catch (e) {
			try {
				obj = JSON.parse(decodeURIComponent(json));
			} catch(e) {
				return cb(e.message, null, json);
			}
		}

		if (obj.errCode == 0) {
			cb(null, obj, json);
		} else {
			cb(obj.errCode + ':' + obj.errMsg);
		}
	}
}

/**
 * 获取登陆态相关cookie
 * @param cb
 */
function getCookie(cb) {
	TenvideoJSBridge.invoke("getCookie", {type: ['tv', 'qq', 'wx']}, commonBridgeCallback(function (err, data, originJSON) {
		if (!err && data.result) {
			var tempdata = {};
			if (data.result.qq) {
				['skey', 'uin', 'lskey', 'luin'].forEach(function (key) {
					tempdata[key] = cookie.get(key, data.result.qq);
				});
				tempdata._skey = tempdata.skey || tempdata.lskey;
				tempdata._uin = parseInt((tempdata.uin || tempdata.luin).replace(/^o0*/g, ""), 10);
			}
			data.result.tv && ['vusession', 'vuserid'].forEach(function (key) {
				tempdata[key] = cookie.get(key, data.result.tv);
			});
			data.result.wx && ['appid', 'access_token'].forEach(function (key) {
				tempdata[key] = cookie.get(key, data.result.wx);
			});
			data = tempdata;
		}
		cb(err, data);
	}));
}

var cacheLoginData = null;
exports.getLoginData = function (opt, cb) {
	if (typeof opt == 'function' && !cb) {
		cb = opt;
		opt = null;
	}
	cb = (function (fn) {
		var called = false;
		return function () {
			if (called) return;
			called = true;
			var args = arguments;
			var self = this;
			setTimeout(function () {
				fn.apply(self, args);
			}, 0)
		}
	})(cb)
	opt = opt || {};
	if (cacheLoginData && opt.cache !== false) {
		return cb(null, cacheLoginData);
	}

	jsbridge(function (bridge) {
		getCookie(function (err, cookie) {
			cookie = cookie || {};
			if (ua.os.ios) {
				bridge.invoke('getMainLogin', null, commonBridgeCallback(function (err, data, originJSON) {
					if (!err) {
						cookie.main_login = data.result;
					}
					cacheLoginData = cookie;
					cb(err, cookie);
				}));
			} else {
				bridge.invoke('getMainLoginType', null, commonBridgeCallback(function (err, data, originJSON) {
					if (!err) {
						cookie.main_login = data.result;
					}
					cacheLoginData = cookie;
					cb(err, cookie);
				}));
			}
		});
	});
};
exports.getLoginDataSync = exports.getLoginData.sync = function () {
	if (!cacheLoginData) {
		console.error('没有可用的登录信息缓存！请保证该方法是由用户后续事件触发的。');
		return {};
	}
	return cacheLoginData;
};

var cacheUserInfo = null;
exports.getUserInfo = function (cb) {
	var self = this;
	if (cacheUserInfo) {
		return cb(null, cacheUserInfo);
	}
	jsbridge(function (bridge) {
		if (!bridge) {
			return cb(new Error('get bridge failed'))
		}
		self.getLoginData(function (err, data) {
			if (err || !data.main_login) {
				return cb(err || 'not login');
			}
			bridge.invoke('getUserInfo', {
				type: [data.main_login]
			}, commonBridgeCallback(function (err, data, originJSON) {
				if (!err && data.result) {
					if (data.result.qq) {
						cacheUserInfo = {
							nick: data.result.qq.nickname,
							face: data.result.qq.headImgUrl
						};
					}
					if (data.result.wx) {
						cacheUserInfo = {
							nick: data.result.wx.nickname,
							face: data.result.wx.headImgUrl
						};
					}
					return cb(null, cacheUserInfo);
				} else {
					cb(err, null);
				}
			}));
		});
	});
};

var loginWaitingCallback = null;
jsbridge(function (bridge) {
	if (!bridge || !bridge.on) {
		return;
	}
	/*
	 取消登录时，errCode=2
	 登录成功时, errCode=0，result.type=登录类型，注：iphone好像会callback两次！
	 退出登录时，errCode=99
	 */
	bridge.on('onActionLoginFinish', function (json) {
		json.errCode != 2 && loginWaitingCallback && loginWaitingCallback(null, json) && (loginWaitingCallback = null);
		exports.getLoginData({cache: false}, function () {});
	});
	bridge.on('actionLoginFinish', function (json) {
		json.errCode != 2 && loginWaitingCallback && loginWaitingCallback(null, json) && (loginWaitingCallback = null);
		exports.getLoginData({cache: false}, function () {});
	});
	bridge.on('onActionLogoutFinish', function (json) {
		loginWaitingCallback && loginWaitingCallback(null, json) && (loginWaitingCallback = null);
		exports.getLoginData({cache: false}, function () {});
	});
});

exports.openLogin = function (opt, cb) {
	if (typeof opt == 'function' && !cb) {
		cb = opt;
		opt = null;
	}
	opt = opt || {};
	cb = cb || function () {};

	jsbridge(function (bridge) {
		if (!bridge) {
			return cb && cb(new Error('get bridge failed'));
		}
		cacheLoginData = null;
		loginWaitingCallback = cb;

		bridge.invoke('actionLogin', {type: opt.type || 'tv'}, function () {});
	});
};

exports.gTk = function (cb) {
	this.getLoginData(function (err, data) {
		if (err) {
			return cb(err);
		}

		var tokens = {};
		var querys = [];
		if (data.skey || data.lskey) {
			tokens.g_tk = time33(data.skey || data.lskey);
			querys.push('g_tk=' + tokens.g_tk);
		}
		if (data.vusession) {
			tokens.g_wxtk = time33(data.vusession);
			querys.push('g_wxtk=' + tokens.g_wxtk);
		}
		tokens.query = querys.join('&');

		cb(null, tokens);
	})
};