/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ua = __webpack_require__(/*! @tencent/txv.ua */ 1)();
	var time33 = __webpack_require__(/*! ../helper/time33 */ 2);

	var controller;
	var controllerName;
	if (ua.browser.qqnews) {
		controller = __webpack_require__(/*! ./controller/news */ 3);;
		controllerName = 'news';

	} else if (ua.browser.QQvideo) {
		controller = __webpack_require__(/*! ./controller/live */ 9);
		controllerName = 'live';

	} else if (ua.browser.WeChat) {
		controller = __webpack_require__(/*! ./controller/wx */ 10);
		controllerName = 'wx';

	} else {
		controller = __webpack_require__(/*! ./controller/qq */ 6);
		controllerName = 'qq'

	}
	// 对外统一接口
	var exportee = {
		//getUserInfo: function(opt, cb) {
		//	controller.getUserInfo.apply(controller, arguments);
		//},
		//getLoginData: function (opt, cb) {
		//	controller.getLoginData.apply(controller, arguments);
		//},
		//openLogin: function (opt, cb) {
		//	controller.openLogin.apply(controller, arguments);
		//},
		//gTk: function () {
		//	controller.gTk.apply(controller, arguments);
		//},
		time33: time33
	};

	// 以下四个方法直接继承controller
	['getUserInfo', 'getLoginData', 'getLoginDataSync', 'openLogin', 'gTk'].forEach(function (fn) {
		exportee[fn] = function () {
		    if (controller[fn]) {
			    return controller[fn].apply(controller, arguments);
		    }
		}
	});
	exportee.getLoginData.sync = controller.getLoginData.sync;

	window.txvLogin = module.exports = exportee;

/***/ },
/* 1 */
/*!*************************************!*\
  !*** ../~/@tencent/txv.ua/index.js ***!
  \*************************************/
/***/ function(module, exports) {

	function check(ua) {
		if (!ua) {
			return;
		}

		var os = {}, browser = {};

		var oscheck = {
			iphone: ua.match(/(iphone)\sos\s([\d_]+)/i),
			ipad: ua.match(/(ipad).*\s([\d_]+)/i),
			ipod: ua.match(/(ipod).*\s([\d_]+)/i),
			android: ua.match(/(android)\s([\d\.]+)/i),
			windows: ua.match(/Windows(\s+\w+)?\s+?(\d+\.\d+)/)
		};

		if (oscheck.ipod) {
			os.ios = os.ipod = true;
			os.version = oscheck.ipod[2].replace(/_/g, '.');
			os.name = 'ipod';
		}
		if (oscheck.ipad) {
			os.ios = os.ipad = true;
			os.version = oscheck.ipad[2].replace(/_/g, '.');
			os.name = 'ipad';
		}
		if (oscheck.iphone) {
			os.iphone = os.ios = true;
			os.version = oscheck.iphone[2].replace(/_/g, '.');
			os.name = 'iphone';
		}
		if (oscheck.android) {
			os.android = true;
			os.version = oscheck.android[2];
			os.name = 'android';
		}
		if (oscheck.windows) {
			os.windows = true;
			os.version = oscheck.windows[2];
			os.name = 'windows';
		}

		var browsercheck = {
			WeChat: ua.match(/MicroMessenger\/((\d+)\.(\d+))\.(\d+)/) || ua.match(/MicroMessenger\/((\d+)\.(\d+))/),
			MQQClient: (ua.match(/QQ\/(\d+\.\d+)/i) || ua.match(/V1_AND_SQ_([\d\.]+)/) && !ua.match(/QQReader/)),//QQ阅读伪装成了QQ然而不具备QQ的jsapi
			MQQReader: ua.match(/QQReader/i),
			QQvideo: ua.match(/QQLiveBrowser\/([\d.]+)/),
			MQQBrowser: ua.match(/MQQBrowser\/(\d+\.\d+)/i),
			UCBrowser: ua.match(/ucbrowser\/(\d+\.\d+)/i),
			Qzone: ua.match(/Qzone\/[\w\d\_]*(\d\.\d)[\.\w\d\_]*/i),
			Weibo: ua.match(/Weibo/i),
			qqnews: ua.match(/qqnews\/(\d+\.\d+\.\d+)/i),
			kuaibao: ua.match(/qnreading\/(\d+\.\d+\.\d+)/i),
			liebao: ua.match(/LieBaoFast\/(\d+\.\d+\.\d+)/i),
			IEMobile: ua.match(/IEMobile(\/|\s+)(\d+\.\d+)/) || ua.match(/WPDesktop/),
			douban: ua.match(/com\.douban\.frodo\/(\d+\.\d+\.\d+)/i),
			MiuiBrowser: ua.match(/MiuiBrowser\/(\d+\.\d+)/i),
			Chrome: os.ios ? ua.match(/CriOS\/(\d+\.\d+)/) : ua.match(/Chrome\/(\d+\.\d+)/),
			Safari: ua.match(/Safari\/(\d+\.\d+)/)
		};

		if (browsercheck.MQQReader) {// 非主流的QQ阅读
			browser.MQQReader = true;
			browser.version = 1;
			browser.name = 'MQQReader';
		} else if (browsercheck.IEMobile) {
			browser.IEMobile = true;
			browser.version = 1;
			browser.name = 'IEMobile';
		} else {
			for (var i in browsercheck) {
				if (browsercheck[i]) {
					browser[i] = true;
					browser.version = browsercheck[i][1];
					browser.name = i;
					break;
				}
			}
		}

		return {
			browser: browser,
			os: os
		};
	}

	var cache = null;

	var exportee = function () {
		return cache || (cache = check(navigator.userAgent));
	};

	//注入到express或者connect的中间件
	exportee.__express = function (req, res, next) {
		req.ua = cache || (cache = check(req.headers['user-agent']));
		next();
	};
	//注入到jquery或zepto
	exportee.__jquery = function ($) {
		$ = $ || window.jQuery || window.Zepto;
		var res = cache || (cache = check(navigator.userAgent));
		$.browser = res.browser;
		$.os = res.os;
	};

	exportee.__clearCache = function () {
	    cache = null;
	};

	module.exports = exportee;

/***/ },
/* 2 */
/*!***************************!*\
  !*** ../helper/time33.js ***!
  \***************************/
/***/ function(module, exports) {

	'use strict';

	module.exports = function (str) {
		// 哈希time33算法
		for (var i = 0, len = str.length, hash = 5381; i < len; ++i) {
			hash += (hash << 5) + str.charAt(i).charCodeAt();
		}
		return hash & 0x7fffffff;
	};

/***/ },
/* 3 */
/*!****************************!*\
  !*** ./controller/news.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 腾讯新闻
	 *
	 * 由于视频的后台和新闻的微信登陆态是不通的，所以只有openLogin需要调用原生接口，其余继承qq的逻辑
	 */

	var jsbridge = __webpack_require__(/*! ../../jsbridge */ 4);
	var qq = __webpack_require__(/*! ./qq.js */ 6);

	['getLoginData', 'getLoginDataSync', 'gTk', 'getUserInfo'].forEach(function (key) {
	    exports[key] = qq[key].bind(exports);
	});

	window["showNativeLoginWithTypeCallBack"] = function(status, params) {
		if(status == 1) {
			//alert("登录成功:" + params);
		}
		if(status == 0) {
			//alert("登录失败:" + params);
		}
	};
	exports.openLogin = function () {
	    jsbridge(function (bridge) {
	        bridge.showNativeLoginWithType("qq", "showNativeLoginWithTypeCallBack", "")
	    });
	};

/***/ },
/* 4 */
/*!**********************!*\
  !*** ../jsbridge.js ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var getScript = __webpack_require__(/*! ./util/getScript */ 5);
	var ua = __webpack_require__(/*! @tencent/txv.ua */ 1)();
	/**
	 * 手Q 微信 腾讯视频app各种bridge的facade
	 */
	var _callbacks = [];
	var _ready = false;
	var _bridge = null;
	var _status = Object.create({}, {
		ready: {
			set: function (v) {
				if (_ready == v) {
					return;
				}
				_ready = v;
				var cb;
				while (cb = _callbacks.shift()) {
					setTimeout((function (cb) {
					    return function () {
						    cb(_bridge);
					    }
					})(cb), 0);
				}
			},
			get: function () {
				return _ready;
			}
		}
	});

	module.exports = function (cb) {
		if (_status.ready) {
			cb(_bridge);
		} else {
			_callbacks.push(cb);
		}
	};

	if (ua.browser.WeChat) {

		var win = window == top ? window : top;

		if (!top.WeixinJSBridge) {
			try {
				win.document.addEventListener("WeixinJSBridgeReady", function () {
					_bridge = win.WeixinJSBridge;
					_status.ready = true;
				});
			} catch (e) {
				_bridge = null;
				_status.ready = true;
			}
		} else {
			_bridge = win.WeixinJSBridge;
			_status.ready = true;
		}
		setTimeout(function () {
			if (!_status.ready) {
				_bridge = null;
				_status.ready = true;
			}
		}, 5000);

	} else if (ua.browser.MQQClient) {

		if (window.mqq || window.QQApi) {
			_bridge = window.mqq || window.QQApi;
			_status.ready = true;
		} else {
			var apiurl = '//s.url.cn/qqmobile/qqapi.js?_bid=152';
			getScript(apiurl, function () {
				_bridge = window.mqq || window.QQApi;
				_status.ready = true;
			});
		}
		setTimeout(function () {
			if (!_status.ready) {
				_bridge = null;
				_status.ready = true;
			}
		}, 6000);

	} else if (ua.browser.QQvideo) {
		if (window.TenvideoJSBridge || window.WebViewJavascriptBridge) {
			QQLiveReady()

		} else {
			document.addEventListener('onTenvideoJSBridgeReady', QQLiveReady);
			document.addEventListener('WebViewJavascriptBridgeReady', QQLiveReady);
			var timer = setInterval(function () {
				if (window.TenvideoJSBridge || window.WebViewJavascriptBridge) {
					clearInterval(timer);
					QQLiveReady();
				} else if (_status.ready) {
					clearInterval(timer);
				}

			}, 200);
			setTimeout(function () {
				if (!_status.ready) {
					_bridge = null;
					_status.ready = true;
				}
			}, 6000);
		}

	} else if (ua.browser.qqnews) {

		if (window.TencentNews) {
			_bridge = window.TencentNews;
			_status.ready = true;

		} else {
			getScript('http://mat1.gtimg.com/www/js/newsapp/jsapi/news.js?_tsid=1', function () {
				if (window.TencentNews) {
					_bridge = window.TencentNews;
					_status.ready = true;

				} else {
					// ios下偶现拉完js依然没对象，我草。
					var timer = setInterval(function () {
						if (window.TencentNews || _status.ready) {
							clearInterval(timer);
							_bridge = window.TencentNews;
							_status.ready = true;
						}
					}, 500)
				}
			});
		}
		setTimeout(function () {
			if (!_status.ready) {
				_bridge = null;
				_status.ready = true;
			}
		}, 6000);
	} else {
		_bridge = null;
		_status.ready = false;
	}

	function QQLiveReady() {
		if (window.WebViewJavascriptBridge) {
			window.TenvideoJSBridge = window.WebViewJavascriptBridge;
			window.TenvideoJSBridge.invoke = window.WebViewJavascriptBridge.callHandler;
			window.TenvideoJSBridge.on = window.WebViewJavascriptBridge.registerHandler;
		}
		_bridge = window.TenvideoJSBridge;
		_status.ready = true;
	}

/***/ },
/* 5 */
/*!****************************!*\
  !*** ../util/getScript.js ***!
  \****************************/
/***/ function(module, exports) {

	'use strict';

	module.exports = function getScript(src, callback) {
		var node = document.createElement('script'),
			script = document.getElementsByTagName('script')[0];
		node.src = src;
		node.type = 'text/javascript';
		node.onload = node.onerror = node.onreadystatechange = function () {
			/loaded|complete|undefined/.test(node.readyState) && function () {
				node.onload = node.onerror = node.onreadystatechange = null;
				node.parentNode.removeChild(node);
				node = undefined;
				callback && callback();
			}();
		};
		script.parentNode.insertBefore(node, script);
	};

/***/ },
/* 6 */
/*!**************************!*\
  !*** ./controller/qq.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 手Q以及其它浏览器
	 */
	'use strict';
	var cookie = __webpack_require__(/*! ../../util/cookie */ 7);
	var jsonp = __webpack_require__(/*! ../../util/jsonp */ 8);
	var time33 = __webpack_require__(/*! ../../helper/time33 */ 2);

	exports.getLoginData = function (opt, cb) {
		if (typeof opt == 'function' && !cb) {
			cb = opt;
			opt = null;
		}
		var data = {
			skey: cookie.get('skey'),
			uin: cookie.get('uin'),
			lskey: cookie.get('lskey'),
			luin: cookie.get('luin')
		};

		// 强制推到下一个eventloop执行
		setTimeout(function () {
			cb(null, data);
		});
		if (data.skey || data.lskey) {
			data.main_login = 'qq';

			data._skey = data.skey || data.lskey;
			data._uin = parseInt((data.uin || data.luin).replace(/^o0*/g, ""), 10);
		}
	};
	exports.getLoginDataSync = exports.getLoginData.sync = function () {
		var data = {
			skey: cookie.get('skey'),
			uin: cookie.get('uin'),
			lskey: cookie.get('lskey'),
			luin: cookie.get('luin')
		};
		if (data.skey || data.lskey) {
			data.main_login = 'qq';

			data._skey = data.skey || data.lskey;
			data._uin = parseInt((data.uin || data.luin).replace(/^o0*/g, ""), 10);
		}
		return data;
	};

	exports.gTk = function (cb) {
		this.getLoginData(function (err, data) {
			var tokens = {};
			if (data.skey || data.lskey) {
				tokens.g_tk = time33(data.skey || data.lskey);
				tokens.query = 'g_tk=' + tokens.g_tk;
			}

			cb(null, tokens);
		})
	};

	var cacheUserInfo = null;

	exports.getUserInfo = function (cb) {
		this.getLoginData(function (err, data) {
			var lowlogin = 0;
			if (!data.skey && !data.lskey) {
				return cb('not login');
			} else if (!data.skey) {
				lowlogin = 1;
			}

			if (cacheUserInfo) {
				return cb(null, cacheUserInfo);
			}
			jsonp('//video.qq.com/fcgi-bin/get_userinfo?' +
				'otype=json&' +
				'_=' + Date.now() + '&' +
				'type=2&' +
				'low_login=' + lowlogin,
				function (err, data) {
					if (!err && data.ret == 0 && data.data[0]) {
						cacheUserInfo = {
							face: data.data[0].headurl,
							nick: data.data[0].nick
						};
						cb(null, cacheUserInfo);
					} else {
						cb(err || data);
					}
				});
		});
	};


	var default_conf = {
		link_target: 'blank',
		low_login: 0,
		target: 'self',
		style: 9,
		appid: '532001601',
		s_url: window.location.href
	};
	exports.openLogin = function (cfg) {
		cfg = cfg || {};
		var url = '//ui.ptlogin2.qq.com/cgi-bin/login?';
		
		for(var k in default_conf) {
			if(default_conf.hasOwnProperty(k)) {
				typeof cfg[k] === 'undefined' ? cfg[k] = default_conf[k] : void(0);
			}
		}

		cfg.s_url && (cfg.s_url = encodeURIComponent(cfg.s_url));

		var params = [];
		for (var key in cfg) {
			if (cfg.hasOwnProperty(key)) {
				params.push(key + '=' + cfg[key])
			}
		}

		url += params.join('&');
		setTimeout(function () {
			window.location.href = url;
		}, 200);
	};

/***/ },
/* 7 */
/*!*************************!*\
  !*** ../util/cookie.js ***!
  \*************************/
/***/ function(module, exports) {

	'use strict';

	module.exports = {
		/**
		 * 设置一个cookie
		 * @param {String}
		 *          name cookie名称
		 * @param {String}
		 *          value cookie值
		 * @param {String}
		 *          domain 所在域名 默认为window.location.host的值
		 * @param {String}
		 *          path 所在路径 默认为是"\"
		 * @param {Number}
		 *          hour 存活时间，单位:小时
		 * @return {Boolean} 是否成功
		 */
		set: function (name, value, domain, path, hour) {
			if (hour) {
				var today = new Date();
				var expire = new Date();
				expire.setTime(today.getTime() + 3600000 * hour);
			}
			document.cookie = name + "=" + value + "; " + (hour ? ("expires=" + expire.toGMTString() + "; ") : "") + (path ? ("path=" + path + "; ") : "path=/; ") + (domain ? ("domain=" + domain + ";") : ("domain=" + window.location.host + ";"));
			return true;
		},

		/**
		 * 获取指定名称的cookie值
		 *
		 * @param {String}
		 *          name cookie名称
		 * @return {String} 获取到的cookie值
		 */
		get: function (name, cookies) {
			var r = new RegExp("(?:^|;+|\\s+)" + name + "=([^;]*)");
			var m = (cookies || document.cookie).match(r);
			return (!m ? "" : m[1]);
		},

		/**
		 * 删除指定cookie,复写为过期
		 *
		 * @param {String}
		 *          name cookie名称
		 * @param {String}
		 *          domain 所在域 默认为 window.location.host的值
		 * @param {String}
		 *          path 所在路径 默认为是"\"
		 */
		del: function (name, domain, path) {
			var exp = new Date();
			exp.setTime(exp.getTime() - 1);
			document.cookie = name + "=; expires=" + exp.toGMTString() + ";" + (path ? ("path=" + path + "; ") : "path=/; ") + (domain ? ("domain=" + domain + ";") : ("domain=" + window.location.host + ";"));
		}
	};

/***/ },
/* 8 */
/*!************************!*\
  !*** ../util/jsonp.js ***!
  \************************/
/***/ function(module, exports) {

	/**
	 * jspnp
	 * @version 1.0.0
	 * @author switer
	 * @github https://github.com/switer/jsonp
	 */
	'use strict';

	var _cbs = {}
	var _ns = '_jsonp'
	var _pn = 'callback'
	var _id = 0
	var _t = 20*1000 // 超时时间

	function noop () {}

	function jsonp (url, cb, options) {

		options = options || {}
		cb = cb || noop

		var s = document.createElement('script')
		var cid = _ns + _id ++
		var ended

		var onsuccess = function (data) {
			document.head.removeChild(s)
			cb(null, data)
		}
		var onerror = function (e) {
			document.head.removeChild(s)
			cb(e || 'error')
			window[cid] = onsuccess = onerror = noop
		}
		window[cid] = function (data) {
			onsuccess(data)
			window[cid] = onsuccess = onerror = noop
		}
		s.onerror = s.onabort = function (e) {
			onerror(e ? e.type : 'error')
		}
		url = url.replace(/[\?\&]$/, '')
		url = url + (~url.indexOf('?') ? '&' : '?') + _pn + '=' + cid + '&_t=' + (+new Date())
		s.src = url
		document.head.appendChild(s)
		setTimeout(function () {
			onerror('timeout')
		}, options.timeout || _t)
	}
	jsonp.timeout = function (t) {
		_t = t
	}
	jsonp.ns = function (n) {
		_ns = n
	}
	jsonp.pn = function (n) {
		_pn = n
	}

	module.exports = jsonp

/***/ },
/* 9 */
/*!****************************!*\
  !*** ./controller/live.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 视频客户端
	 */
	'use strict';
	var ua = __webpack_require__(/*! @tencent/txv.ua */ 1)();
	var jsbridge = __webpack_require__(/*! ../../jsbridge */ 4);
	var time33 = __webpack_require__(/*! ../../helper/time33 */ 2);
	var cookie = __webpack_require__(/*! ../../util/cookie */ 7);

	function commonBridgeCallback(cb) {
		return function (json) {
			var obj;
			try {
				obj = JSON.parse(json);
			} catch (e) {
				try {
					obj = JSON.parse(decodeURIComponent(json));
				} catch(e) {
					return cb(e.message, null, json);
				}
			}
			alert(JSON.stringify(obj));
			if (obj.errCode == 0) {
				cb(null, obj, json);
			} else {
				cb(obj.errCode + ':' + obj.errMsg);
			}
		}
	}

	/**
	 * 获取登陆态相关cookie
	 * @param cb
	 */
	function getCookie(cb) {

		TenvideoJSBridge.invoke("getCookie", {type: ['tv', 'qq', 'wx']}, commonBridgeCallback(function (err, data, originJSON) {
			if (!err && data.result) {
				var tempdata = {};
				if (data.result.qq) {
					['skey', 'uin', 'lskey', 'luin'].forEach(function (key) {
						tempdata[key] = cookie.get(key, data.result.qq);
					});
					tempdata._skey = tempdata.skey || tempdata.lskey;
					tempdata._uin = parseInt((tempdata.uin || tempdata.luin).replace(/^o0*/g, ""), 10);
				}
				data.result.tv && ['vusession', 'vuserid'].forEach(function (key) {
					tempdata[key] = cookie.get(key, data.result.tv);
				});
				data.result.wx && ['appid', 'access_token'].forEach(function (key) {
					tempdata[key] = cookie.get(key, data.result.wx);
				});
				data = tempdata;
			}
			cb(err, data);
		}));
	}

	var cacheLoginData = null;
	exports.getLoginData = function (opt, cb) {
		if (typeof opt == 'function' && !cb) {
			cb = opt;
			opt = null;
		}
		opt = opt || {};
		if (cacheLoginData && opt.cache !== false) {
			return cb(null, cacheLoginData);
		}

		jsbridge(function (bridge) {
			getCookie(function (err, cookie) {
				cookie = cookie || {};
				if (ua.os.ios) {
					bridge.invoke('getMainLogin', null, commonBridgeCallback(function (err, data, originJSON) {
						if (!err) {
							cookie.main_login = data.result;
						}
						cacheLoginData = cookie;
						cb(err, cookie);
					}));
				} else {
					bridge.invoke('getMainLoginType', null, commonBridgeCallback(function (err, data, originJSON) {
						if (!err) {
							cookie.main_login = data.result;
						}
						cacheLoginData = cookie;
						cb(err, cookie);
					}));
				}
			});
		});
	};
	exports.getLoginDataSync = exports.getLoginData.sync = function () {
	    if (!cacheLoginData) {
		    console.error('没有可用的登录信息缓存！请保证该方法是由用户后续事件触发的。');
		    return {};
	    }
		return cacheLoginData;
	};

	var cacheUserInfo = null;
	exports.getUserInfo = function (cb) {
		var self = this;
		if (cacheUserInfo) {
			return cb(null, cacheUserInfo);
		}
		jsbridge(function (bridge) {
			if (!bridge) {
				return cb(new Error('get bridge failed'))
			}
			self.getLoginData(function (err, data) {
				if (err || !data.main_login) {
					return cb(err || 'not login');
				}
				bridge.invoke('getUserInfo', {
					type: [data.main_login]
				}, commonBridgeCallback(function (err, data, originJSON) {
					if (!err && data.result) {
						if (data.result.qq) {
							cacheUserInfo = {
								nick: data.result.qq.nickname,
								face: data.result.qq.headImgUrl
							};
						}
						if (data.result.wx) {
							cacheUserInfo = {
								nick: data.result.wx.nickname,
								face: data.result.wx.headImgUrl
							};
						}
						return cb(null, cacheUserInfo);
					} else {
						cb(err, null);
					}
				}));
			});
		});
	};

	jsbridge(function (bridge) {
		if (!bridge || !bridge.on) {
			return;
		}
		/*
		取消登录时，errCode=2
		登录成功时, errCode=0，result.type=登录类型，注：iphone好像会callback两次！
		 */
		bridge.on('onActionLoginFinish', function (json) {
			exports.getLoginData({cache: false}, function () {});
		});
		bridge.on('actionLoginFinish', function (json) {
			exports.getLoginData({cache: false}, function () {});
		});
	});

	exports.openLogin = function (opt, cb) {
		opt = opt || {};
		jsbridge(function (bridge) {
			if (!bridge) {
				return cb && cb(new Error('get bridge failed'));
			}
			cacheLoginData = null;

			bridge.invoke('actionLogin', {type: opt.type || 'tv'}, function () {
			});
		});
	};

	exports.gTk = function (cb) {
		this.getLoginData(function (err, data) {
			if (err) {
				return cb(err);
			}

			var tokens = {};
			var querys = [];
			if (data.skey || data.lskey) {
				tokens.g_tk = time33(data.skey || data.lskey);
				querys.push('g_tk=' + tokens.g_tk);
			}
			if (data.vusession) {
				tokens.g_wxtk = time33(data.vusession);
				querys.push('g_wxtk=' + tokens.g_wxtk);
			}
			tokens.query = querys.join('&');

			cb(null, tokens);
		})
	};


/***/ },
/* 10 */
/*!**************************!*\
  !*** ./controller/wx.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 微信
	 */
	'use strict';
	var qqController = __webpack_require__(/*! ./qq */ 6);

	var cookie = __webpack_require__(/*! ../../util/cookie */ 7);
	var jsonp = __webpack_require__(/*! ../../util/jsonp */ 8);
	var time33 = __webpack_require__(/*! ../../helper/time33 */ 2);
	var pendfn = __webpack_require__(/*! ./pendfn */ 11);

	// 检测hash，写入qq登录的main_login
	/**
	 * 刷新登陆态和获取用户信息的cgi
	 * 为什么是同一个。。
	 */
	function checkLogin(cb) {
		jsonp('//video.qq.com/fcgi-bin/check_login', function () {
			_cacheLoginData = null;
			cb.apply(null, arguments)
		});
	}

	var _cacheLoginData = null;
	var _callbacks = [];

	var URL = '//video.qq.com/getcookie/getcookie.html.html';
	exports.getLoginData = pendfn(function (opt, cb) {
		if (typeof opt == 'function' && !cb) {
			cb = opt;
			opt = null;
		}
		opt = opt || {};
		var disableCache = opt.cache === false;

		// 有缓存直接callback缓存
		if (_cacheLoginData && !disableCache) {
			return cb(null, _cacheLoginData);
		}

		if (document.domain !== 'qq.com') {
			cb('document.domain不等于qq.com，跨域失败');
		}

		// 和qq的cookie混合
		// qqController的getLoginData其实是同步的，因此不会导致性能太差
		qqController.getLoginData(opt, function (err, qqdata) {

			// 设置回调
			typeof cb === 'function' && _callbacks.push(cb);
			window.txvGetLoginCookiesCallback = function (data) {
				Object.keys(qqdata).forEach(function (key) {
					data[key] = data[key] || qqdata[key];
				});

				_cacheLoginData = data;
				var fn;
				while (fn = _callbacks.shift()) {
					fn(null, data);
				}
				ifa.parentNode.removeChild(ifa);
			};

			// 插入iframe
			var ifa = document.createElement('iframe');
			ifa.src = URL;
			ifa.id = 'tvp_login_cross_domin_frame';
			ifa.style.display = 'none';
			document.body.appendChild(ifa);
		});
	});
	exports.getLoginDataSync = exports.getLoginData.sync = function () {
		if (!_cacheLoginData) {
			console.error('没有可用的登录信息缓存！请保证该方法是由用户后续事件触发的。');
			return {};
		}
		return _cacheLoginData;
	};

	/**
	 * 获取csrf用的g_tk
	 * 后台的普遍逻辑是：
	 * 1.有qq登陆态则传g_tk
	 * 2.有wx登陆态则传g_wxtk
	 * 也就是说，有可能两者都会需要。
	 */
	exports.gTk = function (cb) {
		this.getLoginData(function (err, data) {
			var tokens = {};
			var querys = [];
			if (data.skey || data.lskey) {
				tokens.g_tk = time33(data.skey || data.lskey);
				querys.push('g_tk=' + tokens.g_tk);
			}
			if (data.vusession) {
				tokens.g_wxtk = time33(data.vusession);
				querys.push('g_wxtk=' + tokens.g_wxtk);
			}
			tokens.query = querys.join('&');

			cb(null, tokens);
		});
	};

	var cacheUserInfo = null;
	/**
	 * 获取用户信息
	 */
	exports.getUserInfo = function (cb) {
		cb = cb || function () {};
		this.getLoginData(function (err, data) {
			if (data.main_login == 'qq') {
				qqController.getUserInfo.call(qqController, cb);

			} else if (data.main_login == 'wx') {
				if (cacheUserInfo) {
					return cb(null, cacheUserInfo);
				}
				checkLogin(function (err, data) {
					if (!err && data.errcode == 0) {
						// 在H5页面的一个生命周期内，基本不可能发生头像变更的情况，因此永久缓存
						cacheUserInfo = {
							nick: decodeURIComponent(data.nick),
							face: data.head
						};
						cb(null, cacheUserInfo);
					} else {
						cb(err || data, null);
					}
				});

			} else {
				cb('not login');
			}
		})
	};
	exports.getUserInfo();

	exports.openLogin = function (cfg) {
		cfg = cfg || {};
		var type = cfg.type;
		var url = cfg.s_url || window.location.href;
		if (type != 'qq') {
			// @issacchen，这个cgi会decode两次url
			document.location.href = '//video.qq.com/fcgi-bin/wx_login?from=1&redirect_url=' +
				encodeURIComponent(encodeURIComponent(url));
		} else {

			cfg.s_url = location.protocol + '//video.qq.com/fcgi-bin/qq_login?redirect_url=' + encodeURIComponent(url);
			qqController.openLogin(cfg);
		}
	};

/***/ },
/* 11 */
/*!******************************!*\
  !*** ./controller/pendfn.js ***!
  \******************************/
/***/ function(module, exports) {

	'use strict';

	module.exports = function (fn) {
		var queue = [];
		var pending = false;
		return function (cb) {
			if (arguments.length == 1 && typeof cb == 'function') { // 只有单回调函数才合并
				queue.push(cb);
				if (!pending) {
					pending = true;
					fn.call(this, function () {
						pending = false;
						var callback;
						while(callback = queue.pop()) {
							callback.apply(this, arguments);
						}
					});
				}
			} else {
				return fn.apply(this, arguments);
			}
		}
	};

/***/ }
/******/ ]);